#include <gtest/gtest.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/numpy.h>
//#include <compress.hpp>

namespace py = pybind11;

TEST(COMPRESS, skrald)
{
    EXPECT_EQ(true, true);
    /*
    std::vector<double> values = {
        2, 1201959232, 116.36422, 39.88781, 0,
        2, 1201959436, 116.37481, 39.88782, 204,
        2, 1201959533, 116.37677, 39.88791, 301,
        2, 1201959738, 116.38033, 39.88795, 506,
        2, 1201959835, 116.39392, 39.89014, 603,
        2, 1201960040, 116.41149, 39.89152, 808,
        2, 1201960137, 116.42105, 39.89194, 905,
        2, 1201960341, 116.4215, 39.89823, 1109,
        2, 1201960438, 116.4215, 39.89902, 1206,
        2, 1201960643, 116.42972, 39.90726, 1411,
        3, 1201959548, 116.35743, 39.88957, 0,
        3, 1201959848, 116.35732, 39.89726, 300,
        3, 1201960149, 116.3506, 39.90712, 601,
        3, 1201960449, 116.35171, 39.91145, 901,
        3, 1201960748, 116.34366, 39.89655, 1200,
        3, 1201961048, 116.34347, 39.87605, 1500,
        3, 1201961348, 116.35298, 39.87643, 1800,
        3, 1201961648, 116.36223, 39.88766, 2100,
        3, 1201961948, 116.37556, 39.88786, 2400,
        3, 1201962248, 116.37818, 39.88815, 2700,
        4, 1201965304, 116.47002, 39.90666, 0,
        4, 1201965904, 116.44422, 39.92078, 600,
        4, 1201966504, 116.4344, 39.92296, 1200,
        4, 1201967103, 116.43988, 39.92189, 1799,
        4, 1201967704, 116.47187, 39.91212, 2400,
        4, 1201968305, 116.47448, 39.90664, 3001,
        4, 1201968904, 116.47333, 39.91435, 3600,
        4, 1201969505, 116.46395, 39.92896, 4201,
        4, 1201970105, 116.47235, 39.92161, 4801,
        4, 1201970704, 116.45444, 39.91262, 5400,
        5, 1201959784, 116.62934, 39.82726, 0,
        5, 1201960384, 116.62934, 39.82725, 600,
        5, 1201960984, 116.62933, 39.82725, 1200,
        5, 1201961584, 116.61582, 39.82817, 1800,
        5, 1201962188, 116.59818, 39.82816, 2404,
        5, 1201962784, 116.62944, 39.82734, 3000,
        5, 1201963384, 116.62946, 39.82743, 3600,
        5, 1201963984, 116.62945, 39.82746, 4200,
        5, 1201964584, 116.62944, 39.82746, 4800,
        5, 1201965184, 116.62949, 39.82738, 5400,
        7, 1201965026, 116.76038, 39.79758, 0,
        7, 1201965349, 116.7666, 39.8027, 323,
        7, 1201981618, 116.7666, 39.8027, 16592,
        7, 1201981978, 116.7522, 39.80078, 16952,
        7, 1201982338, 116.72105, 39.81482, 17312,
        7, 1202022778, 116.70168, 39.8301, 57752,
        7, 1202022785, 116.70168, 39.8301, 57759,
        7, 1202024105, 116.6892, 39.8266, 59079,
        7, 1202024825, 116.71878, 39.82333, 59799,
        7, 1202025185, 116.73115, 39.79662, 60159,
        9, 1201959522, 116.37412, 39.99295, 0,
        9, 1201959882, 116.36432, 39.99978, 360,
        9, 1201960242, 116.3611, 39.99237, 720,
        9, 1201960602, 116.3638, 39.97307, 1080,
        9, 1201963297, 116.35667, 39.98615, 3775,
        9, 1201964017, 116.44587, 40.00275, 4495,
        9, 1201964392, 116.46187, 40.00365, 4870,
        9, 1201964752, 116.45647, 39.98852, 5230,
        9, 1201965112, 116.46242, 39.98458, 5590,
        9, 1201965475, 116.478, 39.98205, 5953,
        10, 1201959123, 116.44457, 39.92157, 0,
        10, 1201959238, 116.44043, 39.9219, 115,
        10, 1201959265, 116.4404, 39.92192, 142,
        10, 1201959308, 116.43528, 39.9228, 185,
        10, 1201959363, 116.43523, 39.92287, 240,
        10, 1201959418, 116.42965, 39.92307, 295,
        10, 1201959482, 116.42955, 39.92313, 359,
        10, 1201959500, 116.42842, 39.92335, 377,
        10, 1201959507, 116.42767, 39.92328, 384,
        10, 1201959515, 116.42667, 39.92317, 392
    };
*/
    // const py::array_t<double> data({70, 5}, values.data());
    //const auto trajectories = ndarrayToTrajectories(data);

    // EXPECT_EQ(true,true);
    /*
    for (int i = 0; i < trajectories.size(); i++) {

        for (int j = 0; j < trajectories[i].points.size(); j++) {
            auto index = i+j+5 * (i+j);
            EXPECT_EQ(values[index], trajectories[i].id);
            EXPECT_EQ(values[1+index], trajectories[i].points[j].timestamp);
            EXPECT_EQ(values[2+index], trajectories[i].points[j].longitude);
            EXPECT_EQ(values[3+index], trajectories[i].points[j].latitude);
        }
    }
    */
}
